{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["topicTypes","defaultData","topics","reduce","ac","a","topicsLoading","length","App","useState","data","setData","inputText","setInputText","speechComponent","useRef","useEffect","forEach","type","fetch","then","res","json","retrievedData","oldData","console","log","generalTopics","Object","keys","generalTopic","Math","floor","random","topic","randomCommand","value","onChange","input","target","ref","text","voice","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8QAIMA,EAAa,CACjB,UACA,UAGIC,EAAc,CAClBC,OAAQF,EAAWG,QAAO,SAACC,EAAGC,GAAJ,mBAAC,eAAcD,GAAf,kBAAmBC,EAAG,OAAK,IACrDC,cAAeN,EAAWO,QAuDbC,MApDf,WAAgB,IAAD,EACWC,mBAASR,GADpB,mBACNS,EADM,KACAC,EADA,OAEqBF,mBAAS,IAF9B,mBAENG,EAFM,KAEKC,EAFL,KAGPC,EAAkBC,iBAAO,MAqC/B,OAnCAC,qBAAU,WACRhB,EAAWiB,SAAQ,SAACC,GAClBC,MAAM,iFAAD,OAAkFD,EAAlF,UACJE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJZ,GAAQ,SAAAa,GAAO,kCACVA,GADU,IAEbtB,OAAO,2BACFsB,EAAQtB,QADP,4BAEAgB,GAASK,IAEfjB,cAAekB,EAAQlB,cAAgB,aAK7CO,EAAa,iCACZ,IAEHG,qBAAU,WAER,GADAS,QAAQC,IAAIhB,GACRA,EAAKJ,eAAiB,EAAG,CAE3B,IAAIqB,EAAgBC,OAAOC,KAAKnB,EAAKR,QACjC4B,EAAeH,EAAcI,KAAKC,MAAMD,KAAKE,SAAWN,EAAcpB,SACtE2B,EAAQxB,EAAKR,OAAO4B,GAAcC,KAAKC,MAAMD,KAAKE,SAAWvB,EAAKR,OAAO4B,GAAcvB,SACvF4B,EAAa,+BAA2BD,GAC5CrB,EAAasB,MAEd,CAACzB,IAOF,gCACE,uBAAO0B,MAAOxB,EAAWyB,SAN7B,SAAsBC,GACpBzB,EAAayB,EAAMC,OAAOH,UAMxB,cAAC,IAAD,CACEI,IAAK1B,EACL2B,KAAM7B,EACN8B,MAAM,+BChDCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.49981807.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from 'react'\nimport './App.css';\nimport Speech from 'react-speech';\n\nconst topicTypes = [\n  \"animals\",\n  \"places\"\n]\n\nconst defaultData = {\n  topics: topicTypes.reduce((ac,a) => ({...ac,[a]:''}),{}),\n  topicsLoading: topicTypes.length\n}\n\nfunction App() {\n  const [data, setData] = useState(defaultData)\n  const [inputText, setInputText] = useState(\"\")\n  const speechComponent = useRef(null);\n  \n  useEffect(() => {\n    topicTypes.forEach((type) => {\n      fetch(`https://raw.githubusercontent.com/maxwellbenton/alexa-talker-site/master/data/${type}.json`)\n      .then(res => res.json())\n      .then(retrievedData => {\n        setData(oldData => ({\n          ...oldData,\n          topics: {\n            ...oldData.topics,\n            [`${type}`]: retrievedData\n          },\n          topicsLoading: oldData.topicsLoading - 1\n        }))\n      })\n    })\n\n    setInputText(\"Generating Alexa command...\")\n  }, [])\n\n  useEffect(() => {\n    console.log(data)\n    if (data.topicsLoading <= 0) {\n      \n      let generalTopics = Object.keys(data.topics)\n      let generalTopic = generalTopics[Math.floor(Math.random() * generalTopics.length)]\n      let topic = data.topics[generalTopic][Math.floor(Math.random() * data.topics[generalTopic].length)]\n      let randomCommand = `Alexa, tell me about ${topic}`\n      setInputText(randomCommand)\n    }\n  }, [data])\n\n  function handleChange(input) {\n    setInputText(input.target.value)\n  }\n\n  return (\n    <div>\n      <input value={inputText} onChange={handleChange}/>\n      <Speech \n        ref={speechComponent} \n        text={inputText} \n        voice=\"Google UK English Male\"\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}